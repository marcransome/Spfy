#!/usr/bin/env ruby

require 'spfy'
require 'spfy/version'
require 'docopt'
require 'pathname'

EXE = Pathname(__FILE__).basename

doc = <<DOCOPT
Grab and output XSPF data for media files. See http://xspf.org/ for the data definition.

Usage:
  #{EXE} [options] PATHS...
  #{EXE} --version

Options:
  -h --help                     Show this help message and exit
  -v --version                  Display version information
  -o FILE --output=FILE         File to write to, otherwise output to STDOUT
  -t TITLE --title=TITLE        Playlist title
  -c CREATOR --creator=CREATOR  Playlist creator, defaults to env $USER
  -d DATE --date=DATE           Playlist creation date, defaults to now
  -a NOTE --annotation=NOTE     Playlist annotation, default: "Created with Spfy.rb"
  --no-location                 Suppress file location output
  --no-title                    Suppress track title in output
  --no-artist                   Suppress artist name in output
  --no-album                    Suppress album name in output
  --no-trackNum                 Suppress track number in output - CASE SENSITIVE!
  --max-tracks NUM              Limit the output to NUM tracks
  --use-tidy                    Run the tidy command to prettify the output. 
                                Uses `/usr/bin/command -v tidy` to find tidy and
                                 `tidy -q -i -xml` to filter through.
  --force                       Allow the overwriting of a file.
DOCOPT

begin
  options = Docopt::docopt(doc, version: Spfy::VERSION)
rescue Docopt::Exit => e
  puts e.message
  exit 0
end

output = options.delete "--output"

# Remove extraneous
options.delete "--help"
options.delete "--version"
use_tidy = options.delete "--use-tidy"
force_ok = options.delete "--force"
WARNING_RED="tput setaf 1"
BACK_TO_NORMAL="tput sgr0"

playlist = Spfy::Playlist.new options

COMMAND = "/usr/bin/command"
DEFAULT_TIDY_FINDER="#{COMMAND} -v tidy"

def filter xml, use_tidy=false
  if use_tidy
    require 'open3'
    path = Pathname(`#{DEFAULT_TIDY_FINDER}`.chomp)
    if path.exist?
      stdout, _= Open3.capture2(path.to_path,"-q", "-i", "-xml", stdin_data: xml)
      stdout
    else
      warn `#{WARNING_RED}` + "tidy not found at #{path.to_path}" + `#{BACK_TO_NORMAL}` + "\nRunning without tidyingâ€¦\n\n"
      xml
    end
  else
    xml
  end
end

blk = ->(f){ f.puts filter(playlist.to_xml, use_tidy)  }

begin
if output
  path = Pathname(output)
  if path.exist? and not force_ok
    warn `#{WARNING_RED}` + "#{path.to_path} exists. Use the --force option to overwrite" + `#{BACK_TO_NORMAL}`
  else
    File.open(path, "w", &blk)
  end
else
  blk.call(Kernel)
end
rescue => e
  warn e.message
end